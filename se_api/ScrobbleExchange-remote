#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings,new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ScrobbleExchange
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string apikey()'
  print '  AuthUser login(string token)'
  print '  Artist getArtist(Artist artist)'
  print '  Artist getLightArtist(Artist artist)'
  print '  ArtistSE getArtistSE(Artist artist, User user)'
  print '  ArtistLFM getArtistLFM(Artist artist)'
  print '  ArtistHistory getArtistHistory(Artist artist, i32 n)'
  print '   searchArtist(string text, i32 n, i32 page)'
  print '   getSETop(i32 n, i32 trange, User user)'
  print '   getLFMTop(i32 n, User user)'
  print '   getRecommendedArtists(i32 n, AuthUser user)'
  print '   getTradedArtists(i32 n, User user)'
  print '   getRecentTrades(i32 n, User user)'
  print '  UserData getUserData(string user)'
  print '  AuthUser getUserMoney(AuthUser user)'
  print '   getLeagues()'
  print '  UserLeaderboard getTopUsers(i32 n, League league, i32 trange)'
  print '  UserLeaderboard getNearUsers(string user)'
  print '  Guarantee getGuarantee(Artist artist, AuthUser user)'
  print '  bool buy(Guarantee guarantee, AuthUser user)'
  print '  bool sell(Guarantee guarantee, AuthUser user)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ScrobbleExchange.Client(protocol)
transport.open()

if cmd == 'apikey':
  if len(args) != 0:
    print 'apikey requires 0 args'
    sys.exit(1)
  pp.pprint(client.apikey())

elif cmd == 'login':
  if len(args) != 1:
    print 'login requires 1 args'
    sys.exit(1)
  pp.pprint(client.login(args[0],))

elif cmd == 'getArtist':
  if len(args) != 1:
    print 'getArtist requires 1 args'
    sys.exit(1)
  pp.pprint(client.getArtist(eval(args[0]),))

elif cmd == 'getLightArtist':
  if len(args) != 1:
    print 'getLightArtist requires 1 args'
    sys.exit(1)
  pp.pprint(client.getLightArtist(eval(args[0]),))

elif cmd == 'getArtistSE':
  if len(args) != 2:
    print 'getArtistSE requires 2 args'
    sys.exit(1)
  pp.pprint(client.getArtistSE(eval(args[0]),eval(args[1]),))

elif cmd == 'getArtistLFM':
  if len(args) != 1:
    print 'getArtistLFM requires 1 args'
    sys.exit(1)
  pp.pprint(client.getArtistLFM(eval(args[0]),))

elif cmd == 'getArtistHistory':
  if len(args) != 2:
    print 'getArtistHistory requires 2 args'
    sys.exit(1)
  pp.pprint(client.getArtistHistory(eval(args[0]),eval(args[1]),))

elif cmd == 'searchArtist':
  if len(args) != 3:
    print 'searchArtist requires 3 args'
    sys.exit(1)
  pp.pprint(client.searchArtist(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getSETop':
  if len(args) != 3:
    print 'getSETop requires 3 args'
    sys.exit(1)
  pp.pprint(client.getSETop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getLFMTop':
  if len(args) != 2:
    print 'getLFMTop requires 2 args'
    sys.exit(1)
  pp.pprint(client.getLFMTop(eval(args[0]),eval(args[1]),))

elif cmd == 'getRecommendedArtists':
  if len(args) != 2:
    print 'getRecommendedArtists requires 2 args'
    sys.exit(1)
  pp.pprint(client.getRecommendedArtists(eval(args[0]),eval(args[1]),))

elif cmd == 'getTradedArtists':
  if len(args) != 2:
    print 'getTradedArtists requires 2 args'
    sys.exit(1)
  pp.pprint(client.getTradedArtists(eval(args[0]),eval(args[1]),))

elif cmd == 'getRecentTrades':
  if len(args) != 2:
    print 'getRecentTrades requires 2 args'
    sys.exit(1)
  pp.pprint(client.getRecentTrades(eval(args[0]),eval(args[1]),))

elif cmd == 'getUserData':
  if len(args) != 1:
    print 'getUserData requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUserData(args[0],))

elif cmd == 'getUserMoney':
  if len(args) != 1:
    print 'getUserMoney requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUserMoney(eval(args[0]),))

elif cmd == 'getLeagues':
  if len(args) != 0:
    print 'getLeagues requires 0 args'
    sys.exit(1)
  pp.pprint(client.getLeagues())

elif cmd == 'getTopUsers':
  if len(args) != 3:
    print 'getTopUsers requires 3 args'
    sys.exit(1)
  pp.pprint(client.getTopUsers(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getNearUsers':
  if len(args) != 1:
    print 'getNearUsers requires 1 args'
    sys.exit(1)
  pp.pprint(client.getNearUsers(args[0],))

elif cmd == 'getGuarantee':
  if len(args) != 2:
    print 'getGuarantee requires 2 args'
    sys.exit(1)
  pp.pprint(client.getGuarantee(eval(args[0]),eval(args[1]),))

elif cmd == 'buy':
  if len(args) != 2:
    print 'buy requires 2 args'
    sys.exit(1)
  pp.pprint(client.buy(eval(args[0]),eval(args[1]),))

elif cmd == 'sell':
  if len(args) != 2:
    print 'sell requires 2 args'
    sys.exit(1)
  pp.pprint(client.sell(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
